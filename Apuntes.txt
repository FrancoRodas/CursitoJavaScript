En JavaScript, usamos variables para almacenar datos. Hay tres formas principales de declarar variables:

var → Antiguo, no recomendado (tiene problemas de alcance).
let → Recomendado cuando el valor puede cambiar.
const → Recomendado cuando el valor no cambiará.
Ejemplo de declaración de variables:
var nombre = "Juan";  // No recomendado
let edad = 25;        // Variable que puede cambiar
const PI = 3.1416;    // Constante, su valor no cambia

2️⃣ Tipos de Datos en JavaScript
En JS, los datos pueden tener diferentes tipos. Aquí los más importantes:

Tipo de Dato	Descripción	                         Ejemplo

string	        Cadenas de texto	                 "Hola mundo"

number	        Números enteros y decimales	         42, 3.14

boolean	        Verdadero o falso	                 true, false

null	        Valor intencionalmente vacío	         null

undefined	Variable declarada sin valor	         let x;

object	        Colección de datos clave-valor	        { nombre: "Juan", edad: 25 }

array	        Lista de elementos	                [1, 2, 3]

Ejemplo de cada tipo

let texto = "Hola, soy un string";  // String
let numero = 42;                    // Number
let esMayor = true;                  // Boolean
let vacio = null;                     // Null
let sinDefinir;                        // Undefined
let persona = { nombre: "Ana", edad: 30 };  // Object
let numeros = [10, 20, 30];                  // Array

Conversión de Tipos (Coerción de Datos) en JavaScript
La coerción de tipos es el proceso en el que JavaScript convierte automáticamente o manualmente un tipo de dato en otro.

Existen dos tipos de coerción:

Coerción implícita → JS convierte un tipo automáticamente.
Coerción explícita → Nosotros convertimos el tipo de dato manualmente.
Vamos a ver cada una con ejemplos.

1️⃣ Coerción Implícita (Automática)
Ocurre cuando JavaScript cambia un tipo de dato sin que se lo pidamos directamente.

Ejemplo 1: String + Número → String

console.log("5" + 3);  
📌 Salida: "53"
📌 Explicación: Como hay un string y un number, JS convierte el 3 en "3" y luego los concatena.

Ejemplo 2: String - Número → Number

console.log("10" - 2);  
📌 Salida: 8
📌 Explicación: A diferencia del +, con el -, JS convierte "10" en 10 (número) antes de hacer la operación.

Ejemplo 3: Multiplicación y División con Strings

console.log("6" * "3");  
console.log("10" / "2");  
📌 Salida: 18 y 5
📌 Explicación: Como la multiplicación y división no tienen sentido con strings, JS convierte "6" y "3" en números antes de operar.

Ejemplo 4: Booleanos convertidos a Número

console.log(true + 1);  
console.log(false + 5);  
📌 Salida: 2 y 5
📌 Explicación:

true se convierte en 1, por eso 1 + 1 = 2.
false se convierte en 0, por eso 0 + 5 = 5.

Ejemplo 5: Comparaciones (== vs ===)

console.log("5" == 5);  
console.log("5" === 5);  
📌 Salida: true y false
📌 Explicación:

== convierte "5" a número antes de comparar.
=== compara sin conversión (como "5" es string y 5 es número, da false).
🛑 ¡Cuidado! La coerción implícita puede llevar a errores si no se entiende bien.

2️⃣ Coerción Explícita (Manual)
Cuando queremos cambiar el tipo de dato nosotros mismos, usamos métodos como:

Number()
String()
Boolean()
parseInt() / parseFloat()

Ejemplo 1: Convertir String a Número

let numTexto = "25";
let numReal = Number(numTexto);  // Convierte "25" en 25
console.log(numReal + 5);  // 30

Ejemplo 2: Convertir Número a String

let numero = 100;
let texto = String(numero);  // Convierte 100 en "100"
console.log(texto + " puntos");  // "100 puntos"

Ejemplo 3: Convertir a Booleano

console.log(Boolean(1));    // true
console.log(Boolean(0));    // false
console.log(Boolean(""));   // false
console.log(Boolean("Hola")); // true
📌 Reglas de conversión a Booleano:

0, "" (string vacío), null, undefined, NaN → false
Cualquier otro valor → true

Ejemplo 4: Convertir con parseInt() y parseFloat()

console.log(parseInt("10.99"));  // 10 (redondea hacia abajo)
console.log(parseFloat("10.99"));  // 10.99 (mantiene decimales)
📌 parseInt() solo toma la parte entera, mientras que parseFloat() conserva los decimales.



🧮 Operadores en JavaScript (Explicación Detallada)
Los operadores son símbolos que nos permiten realizar operaciones matemáticas, comparaciones y asignaciones en JavaScript. Se dividen en varias categorías:

1️⃣ Operadores Aritméticos
Se usan para realizar cálculos matemáticos.

Operador	Descripción	        Ejemplo	        Resultado
+	        Suma	            5 + 2	        7
-	        Resta	            5 -             3
*	        Multiplicación	    5 * 2	        10
/	        División	        5 / 2	        2.5
%	        Módulo (resto)	    5 % 2	        1
**	        Exponente	        5 ** 2	        25

📌 Ejemplo en código:

let a = 10;
let b = 3;

console.log(a + b); // 13
console.log(a - b); // 7
console.log(a * b); // 30
console.log(a / b); // 3.333...
console.log(a % b); // 1  (resto de la división)
console.log(a ** b); // 1000 (10 elevado a la 3)

2️⃣ Operadores de Asignación
Se usan para asignar valores a variables.

Operador	Descripción         Ejemplo	   Equivalente a...
=	        Asignación	        x = 5	   -
+=	        Suma y asigna	    x += 5	   x = x + 5
-=	        Resta y asigna	    x -= 5	   x = x - 5
*=	        Multiplica y asigna	x *= 5	   x = x * 5
/=	        Divide y asigna	    x /= 5	   x = x / 5
%=	        Modulo y asigna	    x %= 5	   x = x % 5
**=	        Exponente y asigna	x **= 2	   x = x ** 2
📌 Ejemplo en código:

let x = 10;

x += 5; // x = x + 5 → x = 15
x -= 2; // x = x - 2 → x = 13
x *= 3; // x = x * 3 → x = 39
x /= 3; // x = x / 3 → x = 13
console.log(x); // 13

3️⃣ Operadores de Comparación
Sirven para comparar valores y devuelven true o false.

Operador	Descripción	                              Ejemplo	     Resultado
==	        Igualdad (compara valor)	              5 == "5"	     true
===	        Igualdad estricta (compara valor y tipo)  5 === "5"	     false
!=	        Diferente (compara valor)	              5 != "5"	     false
!==	        Diferente estricto (compara valor y tipo) 5 !== "5"	     true
>	        Mayor que	                              10 > 5	     true
<	        Menor que	                              10 < 5	     false
>=	        Mayor o igual que	                      10 >= 10	     true
<=	        Menor o igual que	                      10 <= 5	     false
📌 Ejemplo en código:

console.log(5 == "5");  // true (solo compara valores)
console.log(5 === "5"); // false (compara valor y tipo)
console.log(10 != "10"); // false
console.log(10 !== "10"); // true
console.log(10 > 5);  // true
console.log(10 < 5);  // false
console.log(10 >= 10); // true
console.log(10 <= 5);  // false
🚨 ¡OJO con == y ===!

5 == "5" da true porque convierte el string a número antes de comparar.
5 === "5" da false porque compara también el tipo de dato.

4️⃣ Operadores Lógicos
Se usan para evaluar expresiones lógicas.

Operador	Descripción	    Ejemplo	        Resultado
&&	        AND (y)	        true && false   false
||	                        ||	            OR (o)
!	        NOT (negación)	!true	        false
📌 Ejemplo en código:

let mayor = true;
let tieneDNI = false;

console.log(mayor && tieneDNI); // false (las dos condiciones deben ser true)
console.log(mayor || tieneDNI); // true (basta con que una sea true)
console.log(!mayor); // false (niega el valor de mayor)
🛑 Ejemplo real:

let edad = 20;
let tieneLicencia = true;

if (edad >= 18 && tieneLicencia) {
    console.log("Puedes manejar.");
} else {
    console.log("No puedes manejar.");
}
Si edad = 20 y tieneLicencia = true, el mensaje será "Puedes manejar."
Si edad = 16, el mensaje será "No puedes manejar."

5️⃣ Operadores de Incremento y Decremento
Se usan para aumentar o disminuir un valor en 1.

Operador	Descripción	              Ejemplo	   Resultado
++	        Incremento	              x++	       Aumenta x en 1
--	        Decremento	              x--	       Disminuye x en 1
📌 Ejemplo en código:

let contador = 5;

console.log(contador++); // 5 (primero muestra el valor, luego suma 1)
console.log(contador); // 6 (ahora el valor sí aumentó)

console.log(++contador); // 7 (suma 1 antes de mostrar el valor)
console.log(contador--); // 7 (muestra el valor, luego resta 1)
console.log(contador); // 6
🚀 Diferencia entre x++ y ++x

x++ → Post-incremento: primero usa el valor, luego lo aumenta.
++x → Pre-incremento: primero aumenta el valor, luego lo usa.

Unidad 3: Control de Flujo en JavaScript
En programación, el control de flujo nos permite decidir qué partes del código se ejecutan y cuántas veces. Esto lo logramos con condicionales, bucles y manejo de errores.

1️⃣ Condicionales (if, else if, else y switch)
Los condicionales nos permiten tomar decisiones en el código según una condición.

🔹 1.1 If - Else If - Else

Si una condición se cumple (true), ejecuta un bloque de código; si no, evalúa otras opciones.

Ejemplo: Decidir si hace frío o calor según la temperatura
let temperatura = 18;

if (temperatura > 25) {
    console.log("Hace calor, salí en remera.");
} else if (temperatura >= 15 && temperatura <= 25) {
    console.log("El clima está templado.");
} else {
    console.log("Hace frío, llevate abrigo.");
}
🔹 Explicación:

Si la temperatura es mayor a 25, se ejecuta el primer bloque.
Si no, pero está entre 15 y 25, se ejecuta el segundo bloque.
Si no cumple ninguna de las anteriores, se ejecuta el else.

🔹 1.2 Switch (Alternativa al if)

switch es útil cuando hay muchas opciones fijas.

Ejemplo: Menú de opciones
let opcion = 2;

switch (opcion) {
    case 1:
        console.log("Elegiste café.");
        break;
    case 2:
        console.log("Elegiste té.");
        break;
    case 3:
        console.log("Elegiste jugo.");
        break;
    default:
        console.log("Opción inválida.");
}
🔹 Explicación:

Cada case representa un posible valor de opcion.
break detiene el switch para que no siga ejecutando los demás case.
default se ejecuta si ninguna opción coincide.

2️⃣ Bucles (for, while, do while)
Los bucles permiten repetir un bloque de código varias veces.

🔹 2.1 Bucle For (Para repetir un número fijo de veces)
El for es ideal cuando sabemos cuántas veces queremos repetir algo.

Ejemplo: Mostrar los números del 1 al 5
for (let i = 1; i <= 5; i++) {
    console.log(i);
}
🔹 Explicación:

let i = 1: inicializa la variable i.
i <= 5: la condición que debe cumplirse para que el bucle siga.
i++: incrementa i en cada iteración.
📌 Salida:
1
2
3
4
5

🔹 ¿Qué es i en un bucle for?
i es solo una variable que usamos como contador en un bucle. La usamos para llevar el control de cuántas veces se repite el código dentro del bucle.

🔹 Estructura de un for
Un bucle for tiene tres partes principales:

for (inicialización; condición; incremento) {
    // Código que se ejecuta en cada iteración
}
✅ Inicialización: Se ejecuta solo una vez al principio del bucle. Aquí definimos el valor inicial de i (normalmente 0 o 1).
✅ Condición: Mientras esta condición sea true, el bucle sigue ejecutándose.
✅ Incremento: Se ejecuta después de cada iteración y modifica el valor de i.

🔹 Ejemplo paso a paso
Vamos a analizar este código:

for (let i = 1; i <= 5; i++) {
    console.log("Iteración número: " + i);
}
🔍 Explicación paso a paso: 1️⃣ Inicialización: let i = 1; → Se define i con el valor inicial de 1.
2️⃣ Condición: i <= 5; → Mientras i sea menor o igual a 5, el bucle sigue ejecutándose.
3️⃣ Ejecución: console.log("Iteración número: " + i); → Se imprime el valor de i.
4️⃣ Incremento: i++ → i aumenta en 1 después de cada iteración.

🔽 Salida en la consola:

Iteración número: 1
Iteración número: 2
Iteración número: 3
Iteración número: 4
Iteración número: 5

🔹 Tipos de incremento
🟢 Incremento de 1 en 1 (más común):

for (let i = 0; i < 10; i++) {
    console.log(i);
}
🔹 i++ es lo mismo que i = i + 1 → Aumenta i en 1 en cada iteración.

🟡 Incremento de más de 1 (por ejemplo, de 2 en 2):

for (let i = 0; i < 10; i += 2) {
    console.log(i);
}
🔹 i += 2 significa que i aumenta de 2 en 2.

🔴 Decremento (bajando en lugar de subir):

for (let i = 10; i >= 0; i--) {
    console.log(i);
}
🔹 i-- es lo mismo que i = i - 1, es decir, el contador va bajando.


🔹 Ejemplo práctico con tabla de multiplicar

Ahora que entendemos el incremento, veamos cómo funciona en un ejercicio real:

let numero = parseInt(readline.question("Ingrese un número: "));

for (let i = 1; i <= 10; i++) {
    console.log(`${numero} x ${i} = ${numero * i}`);
}

🔹 i comienza en 1 y se incrementa hasta 10. Cada vez que aumenta, se multiplica numero * i.

🔽 Salida si el usuario ingresa 5:

5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
...
5 x 10 = 50

🔹 Conclusión
📌 i es el contador que usamos en un bucle for para controlar cuántas veces se ejecuta el código.
📌 Siempre inicia en un valor específico, tiene una condición para seguir, y se incrementa en cada repetición.
📌 El incremento puede ser i++ (de 1 en 1), i += 2 (de 2 en 2), o incluso i-- (para contar hacia atrás).



🔹 2.2 Bucle While (Repite mientras una condición sea verdadera)
while repite un bloque de código hasta que una condición deje de cumplirse.

Ejemplo: Contar del 1 al 5 usando while
let contador = 1;

while (contador <= 5) {
    console.log(contador);
    contador++; // Importante: sin esto sería un bucle infinito.
}
📌 Salida:
1
2
3
4
5

🔹 2.3 Bucle Do While (Ejecuta al menos una vez)
El do while se ejecuta al menos una vez, incluso si la condición es falsa.

Ejemplo: Pedir un número mayor a 10
let numero;
do {
    numero = parseInt(readline.question("Ingrese un número mayor a 10: "));
} while (numero <= 10);

console.log(`Ingresaste: ${numero}`);
🔹 Explicación:

Primero ejecuta el código, sin importar si la condición es falsa.
Luego verifica la condición para decidir si repite o no.

3️⃣ Control de Bucles (break y continue)
A veces necesitamos interrumpir un bucle antes de que termine (break) o saltar una iteración (continue).

🔹 3.1 Break (Salir de un bucle)
Se usa para detener un bucle cuando se cumple una condición.

Ejemplo: Detener el bucle al encontrar un número
for (let i = 1; i <= 10; i++) {
    if (i === 5) {
        console.log("Encontré el 5, saliendo...");
        break; // Detiene el bucle
    }
    console.log(i);
}
📌 Salida:
1
2
3
4
Encontré el 5, saliendo...

🔹 3.2 Continue (Saltar una iteración)
Se usa para saltar una iteración específica sin detener el bucle.

Ejemplo: Mostrar números del 1 al 5, pero sin el 3

for (let i = 1; i <= 5; i++) {
    if (i === 3) {
        continue; // Salta el número 3
    }
    console.log(i);
}
📌 Salida:
1
2
4
5

4️⃣ Manejo de Errores (try...catch)
Los errores pueden hacer que el código se detenga. Para evitarlo, usamos try...catch.

Ejemplo: Manejo de error al dividir por 0
try {
    let num1 = 10;
    let num2 = 0;
    if (num2 === 0) {
        throw new Error("No se puede dividir por cero.");
    }
    console.log(num1 / num2);
} catch (error) {
    console.log("Error:", error.message);
}
📌 Salida:
Error: No se puede dividir por cero.
🔹 Explicación:

try ejecuta el código.
Si ocurre un error, catch lo atrapa y evita que el programa se detenga.
throw lanza un error manualmente.
Resumen de la Unidad
✅ if - else if - else: Para tomar decisiones.
✅ switch: Para múltiples opciones fijas.
✅ for: Para repetir algo un número determinado de veces.
✅ while: Para repetir algo mientras una condición sea verdadera.
✅ do while: Para ejecutar al menos una vez antes de verificar la condición.
✅ break: Para detener un bucle antes de que termine.
✅ continue: Para saltar una iteración sin salir del bucle.
✅ try...catch: Para manejar errores sin que el programa se rompa.

Un bucle anidado es simplemente un bucle dentro de otro bucle. Se usa cuando necesitamos trabajar con estructuras en dos dimensiones, como tablas, patrones de asteriscos, matrices, etc.

🔹 ¿Cómo funciona?
El bucle externo controla la cantidad de veces que se ejecuta el bucle interno.

📌 Ejemplo 1: Imprimir una cuadrícula de asteriscos (5x5)

js
for (let i = 1; i <= 5; i++) { // Controla las filas
    let linea = "";
    for (let j = 1; j <= 5; j++) { // Controla las columnas
        linea += "* ";
    }
    console.log(linea);
}
✅ Salida:

markdown
Copiar
Editar
* * * * * 
* * * * * 
* * * * * 
* * * * * 
* * * * * 
🔍 Explicación
El for externo (i) maneja las filas (va de 1 a 5).

El for interno (j) maneja las columnas (va de 1 a 5).

linea += "* " construye cada fila con asteriscos antes de imprimirla.

📌 Ejemplo 2: Triángulo de números
js
for (let i = 1; i <= 5; i++) {
    let linea = "";
    for (let j = 1; j <= i; j++) {
        linea += j + " ";
    }
    console.log(linea);
}
✅ Salida:

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
🔍 Explicación
El primer for (i) maneja las filas.

El segundo for (j) imprime números del 1 hasta i en cada fila.

📌 Ejemplo 3: Tablas de multiplicar (1 al 5)

for (let i = 1; i <= 5; i++) {
    console.log(`Tabla del ${i}:`);
    for (let j = 1; j <= 10; j++) {
        console.log(`${i} x ${j} = ${i * j}`);
    }
    console.log(""); // Espacio entre tablas
}
✅ Salida (Ejemplo con i = 2):

Tabla del 2:
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
...
2 x 10 = 20
🚀 Resumen
Los bucles anidados son útiles cuando necesitamos estructuras con filas y columnas.

El bucle externo controla las filas o las iteraciones principales.

El bucle interno ejecuta acciones repetidas dentro de cada iteración del externo.

🔹 ¿Qué es un array en JavaScript?
Un array es una estructura de datos que permite almacenar múltiples valores en una sola variable. Se usa para organizar listas de elementos, como números, palabras u objetos.

🔹 Cómo crear un array
Podemos crear un array de varias maneras:

js
// Array vacío
let miArray = [];

// Array con valores
let numeros = [1, 2, 3, 4, 5];

let frutas = ["manzana", "pera", "plátano"];
🔹 Cómo acceder a elementos de un array
Cada elemento tiene un índice, comenzando desde 0.

js

console.log(frutas[0]); // "manzana"
console.log(frutas[2]); // "plátano"
🔹 Métodos para añadir elementos

push() → Añade al final
unshift() → Añade al inicio

js

frutas.push("naranja");  // ["manzana", "pera", "plátano", "naranja"]
frutas.unshift("kiwi"); // ["kiwi", "manzana", "pera", "plátano", "naranja"]
🔹 Métodos para eliminar elementos

pop() → Elimina el último
shift() → Elimina el primero

js
frutas.pop(); // ["kiwi", "manzana", "pera", "plátano"]
frutas.shift(); // ["manzana", "pera", "plátano"]

🔹 Diferencias entre slice() y splice()
Estos dos métodos parecen similares, pero tienen usos muy diferentes:

📌 slice() (extrae elementos SIN modificar el array original)
📌 splice() (modifica el array original, eliminando o agregando elementos)

🔹 Ejemplo con slice() (No modifica el array original)
js
let numeros = [10, 20, 30, 40, 50];

// Extraemos una parte del array sin modificar el original

let nuevosNumeros = numeros.slice(1, 4); // Desde la posición 1 hasta la 3 (sin incluir la 4)

console.log(numeros);       // [10, 20, 30, 40, 50]  -> Array original intacto
console.log(nuevosNumeros); // [20, 30, 40] -> Nuevo array con los elementos extraídos
📌 slice(inicio, fin) → Extrae desde inicio hasta fin - 1.

🔹 Ejemplo con splice() (Modifica el array original)
js

let colores = ["Rojo", "Azul", "Verde", "Amarillo", "Negro"];

// Eliminamos 2 elementos desde la posición 1 y agregamos "Blanco" y "Morado"
colores.splice(1, 2, "Blanco", "Morado");

console.log(colores); 
// ["Rojo", "Blanco", "Morado", "Amarillo", "Negro"]
📌 splice(posición, cantidad, nuevoElemento1, nuevoElemento2, ...)
👉 Borra cantidad de elementos y opcionalmente agrega nuevos en esa posición.

🔹 Ordenar arrays con .sort()
El método .sort() ordena los elementos de un array alfabéticamente por defecto. Sin embargo, cuando trabajamos con números, necesitamos pasarle una función de comparación.

📌 Ejemplo 1: Ordenar números de menor a mayor
js

let numeros = [5, 10, 2, 8, 1];

// Ordenar de menor a mayor
numeros.sort((a, b) => a - b);

console.log(numeros); // [1, 2, 5, 8, 10]
🔸 Explicación:

.sort() compara dos elementos (a y b).

Si a - b es negativo, a se coloca antes que b.

Si a - b es positivo, b se coloca antes que a.

Si a - b es cero, quedan en el mismo lugar.

📌 Ejemplo 2: Ordenar palabras alfabéticamente
js

let palabras = ["manzana", "pera", "uva", "banana"];

palabras.sort();

console.log(palabras); // ["banana", "manzana", "pera", "uva"]
🔸 Las palabras se ordenan automáticamente en orden alfabético.

🔹 Filtrar arrays con .filter()
El método .filter() permite crear un nuevo array con los elementos que cumplen cierta condición.

📌 Ejemplo 3: Filtrar números mayores a 10
js

let numeros = [5, 12, 8, 20, 3, 15];

let mayoresA10 = numeros.filter(numero => numero > 10);

console.log(mayoresA10); // [12, 20, 15]
🔸 Explicación:

.filter() recorre el array y mantiene solo los elementos que cumplen la condición numero > 10.

📌 Ejemplo 4: Filtrar palabras por longitud
js

let palabras = ["casa", "elefante", "sol", "mariposa", "pez"];

let palabrasLargas = palabras.filter(palabra => palabra.length > 4);

console.log(palabrasLargas); // ["elefante", "mariposa"]
🔸 Aquí filtramos las palabras que tienen más de 4 letras.

📌 ¿Qué es un objeto en JavaScript?
Un objeto es una estructura que almacena datos en pares clave-valor. Es como una caja donde guardamos información organizada.

Ejemplo de un objeto simple:

js

let persona = {
    nombre: "Juan",
    edad: 25,
    ciudad: "Madrid"
};

console.log(persona.nombre); // "Juan"
console.log(persona.edad);   // 25
Aquí persona es un objeto con tres propiedades: nombre, edad y ciudad.

1️⃣ Crear y acceder a propiedades de un objeto
Puedes acceder a las propiedades de dos maneras:

✔ Con punto (.)

js

console.log(persona.nombre); // "Juan"
✔ Con corchetes ([])

js

console.log(persona["edad"]); // 25


2️⃣ Modificar propiedades del objeto
Para cambiar el valor de una propiedad en un objeto, simplemente accedemos a ella y asignamos un nuevo valor.

Ejemplo:
js

let persona = {
    nombre: "Juan",
    edad: 25
};

// Modificar la edad
persona.edad = 26;
console.log(persona.edad); // 26

3️⃣ Agregar nuevas propiedades al objeto
Puedes agregar propiedades al objeto en cualquier momento.

Ejemplo:
js

persona.direccion = "Calle Falsa 123";
console.log(persona.direccion); // "Calle Falsa 123"

4️⃣ Eliminar propiedades
Para eliminar una propiedad de un objeto, usamos el operador delete.

Ejemplo:
js

delete persona.direccion;
console.log(persona.direccion); // undefined

Métodos de objetos
Un método de objeto es simplemente una función que se define dentro de un objeto. Se usa para que el objeto realice alguna acción o calcule algún valor basado en sus propiedades. Los métodos se definen igual que las funciones, pero dentro del objeto.

Ejemplo de un método de objeto:
javascript

let coche = {
    marca: "Lamborghini",
    modelo: "Huracán",
    año: 2022,
    // Método que muestra información sobre el coche
    mostrarInfo: function() {
        console.log(`Este coche es un ${this.marca} ${this.modelo} del año ${this.año}.`);
    }
};

// Llamamos al método del objeto
coche.mostrarInfo(); // Esto imprimirá: Este coche es un Lamborghini Huracán del año 2022.
En este ejemplo, el objeto coche tiene una propiedad llamada mostrarInfo que es un método. Este método utiliza this para acceder a las propiedades del objeto (marca, modelo, año) y las imprime en la consola.

El uso de this
El valor de this en JavaScript hace referencia al objeto que está llamando al método. Es una forma de acceder a las propiedades y métodos del objeto desde dentro de la propia función.

En el ejemplo anterior:

javascript

mostrarInfo: function() {
    console.log(`Este coche es un ${this.marca} ${this.modelo} del año ${this.año}.`);
}
this.marca se refiere a la propiedad marca del objeto coche.

this.modelo se refiere a la propiedad modelo del objeto coche.

this.año se refiere a la propiedad año del objeto coche.

Métodos abreviados con this
En ECMAScript 6 (ES6), podemos usar una forma más corta para escribir los métodos dentro de un objeto. La función es definida de una manera más compacta:

javascript

let coche = {
    marca: "Lamborghini",
    modelo: "Huracán",
    año: 2022,
    mostrarInfo() {
        console.log(`Este coche es un ${this.marca} ${this.modelo} del año ${this.año}.`);
    }
};

coche.mostrarInfo(); // Esto también imprimirá: Este coche es un Lamborghini Huracán del año 2022.

const readline = require("readline-sync");
// üîπ Ejercicio 1: Clasificador de N√∫meros
// Pide al usuario un n√∫mero y muestra si es positivo, negativo o cero.
// let numero = parseFloat(readline.question("Ingrese un n√∫mero: "));

// if (numero > 0) {
//     console.log("El n√∫mero es positivo");
// } else if (numero < 0) {
//     console.log("El n√∫mero es negativo");
// } else {
//     console.log("El n√∫mero es cero");
// }
// üîπ Ejercicio 2: Evaluador de Notas
// Pide al usuario una calificaci√≥n (0 a 100) y muestra la categor√≠a:
// 90-100: Excelente
// 70-89: Aprobado
// 50-69: En recuperaci√≥n
// 0-49: Reprobado

// let calificacion = parseFloat(readline.question("Por favor ingrese una calificacion: "));
// switch (true) {
//     case (calificacion >= 90):
//         console.log("Excelente");
//         break;
//     case (calificacion >= 70):
//         console.log("Aprobado");
//         break;
//     case (calificacion >= 50):
//         console.log("En recuperaci√≥n");
//         break;
//     default:
//         console.log("Reprobado");
// }
// ¬øQu√© pasa ac√°?


// Como switch no puede evaluar rangos directamente, se usa true en switch().
// Cada case eval√∫a una condici√≥n booleana (true o false).
// La primera condici√≥n que sea true hace que el programa entre en ese case.
// üìå Conclusi√≥n:
// Para comparar valores en un rango, us√° if - else if.
// Si quer√©s s√≠ o s√≠ usar switch, ten√©s que hacer ese truco de switch (true), pero en este caso if es m√°s claro y directo.
// let calificacion = parseFloat(readline.question("Ingrese una calificaci√≥n (0-100): "));

// if (calificacion < 0 || calificacion > 100) {
//     console.log("Error: La calificaci√≥n debe estar entre 0 y 100.");
// } else if (calificacion >= 90) {
//     console.log("Excelente");
// } else if (calificacion >= 70) {
//     console.log("Aprobado");
// } else if (calificacion >= 50) {
//     console.log("En recuperaci√≥n");
// } else {
//     console.log("Reprobado");
// }
// üîπ Ejercicio 3: Contador con While
// Pide al usuario un n√∫mero y usa un bucle while para contar desde 1 hasta ese n√∫mero.
// let contador = parseInt(readline.question("Por favor ingrese un numero: "));

// let limite = parseInt(readline.question("Ingrese un n√∫mero l√≠mite para contar: "));

// let contador = 1; // Comienza desde 1
// while (contador <= limite) {
//     console.log(contador);
//     contador++;
// }
// // üîπ Ejercicio 4: Tabla de Multiplicar con For
// Pide un n√∫mero y muestra su tabla de multiplicar del 1 al 10 usando un bucle for.

// let numero = parseInt(readline.question("Ingrese un n√∫mero para ver su tabla de multiplicar: "));

// if (isNaN(numero)) {
//     console.log("Error: Debe ingresar un n√∫mero v√°lido.");
// } else {
//     console.log(`\nTabla del ${numero}:`);
//     console.log("--------------------");
//     for (let i = 1; i <= 10; i++) {
//         console.log(`${numero} x ${i} = ${numero * i}`);
//     }
//     console.log("--------------------");
// }

// Ejercicio 5: N√∫mero Primo
// üìå Pedir al usuario un n√∫mero y decir si es primo o no.
// ‚úî Un n√∫mero es primo si solo es divisible entre 1 y √©l mismo.
// ‚úî Us√° un bucle for para verificarlo.

// let numero = parseInt(readline.question("Ingrese un n√∫mero: "));
// let esPrimo = true;

// if (numero <= 1) {
//     esPrimo = false; // Los n√∫meros menores o iguales a 1 no son primos
// } else {
//     for (let i = 2; i < numero; i++) {
//         if (numero % i === 0) {
//             esPrimo = false; // Si es divisible por otro n√∫mero, no es primo
//             break; // Detenemos el bucle porque ya sabemos que no es primo
//         }
//     }
// }

// console.log(esPrimo ? "El n√∫mero es primo" : "El n√∫mero NO es primo");

// Ejercicio 6: Suma de N√∫meros Pares
// üìå Pedir un n√∫mero al usuario y mostrar la suma de todos los n√∫meros pares desde 1 hasta ese n√∫mero.
// ‚úî Us√° un bucle for o while.

// let numero = parseInt(readline.question("Por favor ingrese un numero que no sea menor a 1: "));

// if (numero <= 1) {
//     console.log("Error: Debe ingresar un n√∫mero mayor a 1");
// } else {
//     let suma = 0; // Variable para acumular la suma de los pares
//     for (let i = 2; i <= numero; i += 2) {
//         suma += i; // Acumula los n√∫meros pares
//     }
//     console.log(`La suma de los n√∫meros pares hasta ${numero} es: ${suma}`);
// }

// Ejercicio 7: Inversor de N√∫meros
// üìå Pedir un n√∫mero y mostrarlo al rev√©s.
// ‚úî Ejemplo: 1234 ‚Üí 4321
// ‚úî Tip: Convertir el n√∫mero a string y usar un bucle o m√©todos de string.

// let numero = parseInt(readline.question("Ingrese un n√∫mero para invertir: "));

// // Convertir el n√∫mero a string, separarlo en caracteres, invertirlo y unirlo de nuevo
// let numeroInvertido = parseInt(numero.toString().split('').reverse().join(''));

// console.log(`N√∫mero invertido: ${numeroInvertido}`);
// üîπ Explicaci√≥n del c√≥digo
// numero.toString() ‚Üí Convierte el n√∫mero en un string para poder manipularlo.
// .split('') ‚Üí Divide el string en un array de caracteres.
// 1234 ‚Üí ['1', '2', '3', '4']
// .reverse() ‚Üí Invierte el array.
// ['1', '2', '3', '4'] ‚Üí ['4', '3', '2', '1']
// .join('') ‚Üí Une los elementos del array en un solo string.
// ['4', '3', '2', '1'] ‚Üí "4321"
// parseInt(...) ‚Üí Convierte la cadena invertida de nuevo en n√∫mero.}

// Ejercicio 8: Factorial
// üìå Pedir un n√∫mero y mostrar su factorial.
// ‚úî Factorial de 5 = 5 √ó 4 √ó 3 √ó 2 √ó 1 = 120
// ‚úî Us√° un bucle for o while.

let numero = parseInt(readline.question("Por favor ingrese un n√∫mero para ver su factorial: "));
if (isNaN(numero) || numero < 0) {
    console.log("Error: Debe ingresar un n√∫mero v√°lido mayor o igual a 0");
} else {
    let factorial = 1;
    for (let i = 1; i <= numero; i++) {
        factorial *= i;
    }
    console.log(`El factorial de ${numero} es: ${factorial}`);
}